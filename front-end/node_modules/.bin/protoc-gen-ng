#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs_1 = require("fs");
var path_1 = require("path");
var protoc_plugin_1 = require("protoc-plugin");
var config_1 = require("./config");
var proto_1 = require("./input/proto");
var logger_1 = require("./logger");
var pb_file_1 = require("./output/files/pb-file");
var pbconf_file_1 = require("./output/files/pbconf-file");
var pbsc_file_1 = require("./output/files/pbsc-file");
var pbwsc_file_1 = require("./output/files/pbwsc-file");
var printer_1 = require("./output/misc/printer");
var services_1 = require("./services");
function main() {
    protoc_plugin_1.CodeGeneratorRequest()
        .then(function (r) {
        var protocInput = r.toObject();
        services_1.Services.Config = config_1.Config.fromParameter(protocInput.parameter);
        services_1.Services.Logger = new logger_1.Logger(services_1.Services.Config.debug);
        var protos = protocInput.protoFileList.map(function (proto) { return new proto_1.Proto(proto); });
        if (services_1.Services.Config.debug) {
            fs_1.mkdirSync('debug', { recursive: true });
            fs_1.writeFileSync(path_1.join('debug', 'config.json'), JSON.stringify(services_1.Services.Config, null, 2), 'utf-8');
            fs_1.writeFileSync(path_1.join('debug', 'protoc-input.json'), JSON.stringify(protocInput, null, 2), 'utf-8');
            fs_1.writeFileSync(path_1.join('debug', 'parsed-protoc-gen-ng.json'), JSON.stringify(protos, null, 2), 'utf-8');
        }
        protos.forEach(function (p) { return p.setupDependencies(protos); });
        protos.forEach(function (p) { return p.resolveTransitiveDependencies(); });
        var genwkt = services_1.Services.Config.embedWellKnownTypes;
        return protos
            .filter(function (p) { return genwkt || !genwkt && p.pb_package !== 'google.protobuf'; })
            .reduce(function (res, proto) {
            services_1.Services.Logger.debug("Start processing proto " + proto.name);
            var basename = proto.getGeneratedFileBaseName();
            var files = [];
            if (proto.serviceList.length) {
                if (services_1.Services.Config.files.pbconf.generate) {
                    var configPrinter = new printer_1.Printer();
                    var configFile = new pbconf_file_1.PbConfFile(proto);
                    configFile.print(configPrinter);
                    files.push({ name: basename + 'conf.ts', content: configPrinter.finalize() });
                }
                if (services_1.Services.Config.files.pbsc.generate) {
                    var pbscPrinter = new printer_1.Printer();
                    var pbscFile = new pbsc_file_1.PbscFile(proto);
                    pbscFile.print(pbscPrinter);
                    files.push({ name: basename + 'sc.ts', content: pbscPrinter.finalize() });
                }
                if (services_1.Services.Config.files.pbwsc.generate) {
                    var pbwscPrinter = new printer_1.Printer();
                    var pbwscFile = new pbwsc_file_1.PbwscFile(proto);
                    pbwscFile.print(pbwscPrinter);
                    files.push({ name: basename + 'wsc.ts', content: pbwscPrinter.finalize() });
                }
            }
            if (services_1.Services.Config.files.pb.generate) {
                var pbPrinter = new printer_1.Printer();
                var pbFile = new pb_file_1.PbFile(proto);
                pbFile.print(pbPrinter);
                files.push({ name: basename + '.ts', content: pbPrinter.finalize() });
            }
            services_1.Services.Logger.debug("End processing proto " + proto.name);
            return tslib_1.__spread(res, files);
        }, []);
    })
        .then(protoc_plugin_1.CodeGeneratorResponse())
        .catch(function (err) {
        var _a, _b;
        (_a = services_1.Services.Logger) === null || _a === void 0 ? void 0 : _a.debug(err);
        (_b = services_1.Services.Logger) === null || _b === void 0 ? void 0 : _b.debug(err.stack);
        return protoc_plugin_1.CodeGeneratorResponseError()(err);
    });
}
main();
//# sourceMappingURL=main.js.map