syntax = "proto3";

package routeguide;


// Interface exported by the server.
service RouteGuide {
  // package related
  rpc CreatePackage(CreatePackageRequest) returns (Package) {}
  rpc DeletePackage(DeletePackageRequest) returns (Empty) {}
  rpc UpdatePackage(UpdatePackageRequest) returns (Package) {}

  rpc GetPackage(GetPackageRequest) returns (Package) {}
  rpc ListPackages(ListPackagesRequest) returns (ListPackagesResponse) {}
  rpc SearchPackages(SearchPackagesRequest) returns (SearchPackagesResponse) {}



  // Binary related 
  rpc UploadBinary(UploadBinaryRequest) returns (Status) {}

  rpc DeleteBinary(DeleteBinaryRequest) returns (Empty) {}

  rpc GetBinary(GetBinaryRequest) returns (Binary) {}
  rpc BatchGetBinary(BatchGetBinaryRequest) returns (BatchGetBinaryResponse) {}
  rpc ListBinaries(ListBinariesRequest) returns (ListBinariesResponse) {}
  rpc DownloadBinary(DownloadBinaryRequest) returns (Binary) {}


  // Image related
  rpc UploadImage(UploadImageRequest) returns (Url) {}


  // comment related
  rpc CreateComment(CreateCommentRequest) returns (Comment) {}
  rpc DeleteComment(DeleteCommentRequest) returns (Empty) {}
  rpc UpdateComment(UpdateCommentRequest) returns (Comment) {}
  rpc ListComments(ListCommentsRequest) returns (ListCommentsResponse) {}
//   rpc UpdateComment(UpdateCommentRequest) returns (Comment) {}
  rpc CreateReply(CreateReplyRequest) returns (Reply) {}
  rpc DeleteReply(DeleteReplyRequest) returns (Empty) {}
  rpc UpdateReply(UpdateReplyRequest) returns (Reply) {}

  // User related
  rpc SignUp(SignUpRequest) returns (SignUpResponse) {}
  rpc SignIn(SignInRequest) returns (SignInResponse) {}
  rpc SignOut(SignOutRequest) returns (Status) {}
  rpc GetUser(GetUserRequest) returns (User) {}

  rpc UpdateUser(UpdateUserRequest) returns (User) {}
  rpc UpdatePassword(UpdatePasswordRequest) returns (Empty) {}

  //
  rpc GetStatistic(GetStatisticRequest) returns (Statistic) {}
}

// package related

message CreatePackageRequest {
    Package package = 1;
}

message UpdatePackageRequest {
    Package package = 1;
}

message DeletePackageRequest {
    Package package = 1;
}

message GetPackageRequest {
    int64 package_id = 1;
}

message ListPackagesRequest {
    int64 category_id = 1;
    int64 page_size = 2;
    string page_token = 3;
}

message ListPackagesResponse {
    repeated Package packages = 1;
    string next_page_token = 2;
}


message SearchPackagesRequest {
    // A json object contains search parameters
    // Supported parameters:
    //   - category_id
    //   - author_name
    // Plan to support:
    //   - create_after
    //   - accessibility
    //   - tags
    //   - name
    //   - description
    string query = 1;
    int64 page_size = 2;
    string page_token = 3;
}

message SearchPackagesResponse {
    repeated Package packages = 1;
    string next_page_token = 2;
}

// binary

message GetBinaryRequest {
    int64 binary_id = 1;
}

message UploadBinaryRequest {
    string parent = 1; // categories/xxx/packages/xxxx
    Binary binary = 2;
    oneof resource {
        bytes data = 3;
        string download_method = 4;
    }
}

message BatchGetBinaryRequest {
    repeated int64 binary_id = 1;
}

message BatchGetBinaryResponse {
    repeated Binary binaries = 1;
}


message DownloadBinaryRequest {
    string parent = 1; // categories/xxx/packages/xxx
    int64 binary_id = 2;
}

message DeleteBinaryRequest {
    int64 binary_id = 1;
}

message ListBinariesRequest {
    int64 package_id = 1;
    int64 page_size = 2;
    string page_token = 3; 
}

message ListBinariesResponse {
    repeated Binary binaries = 1;
}


// image

message UploadImageRequest {
    string parent = 1; // categories/xxx/packages/xxx or users/user_id
    bytes image = 2;
}


// Comments
message CreateCommentRequest {
    Comment comment = 1;
}

message DeleteCommentRequest {
    int64 comment_id = 1;
}

message UpdateCommentRequest {
    Comment comment = 1;
}

message ListCommentsRequest {
    // Supported values:
    // `categories/xxx/packages/xxx`
    // `website`
    string parent = 1;
    int64 page_size = 2;
    string page_token = 3;
}

message ListCommentsResponse {
    repeated Comment comments = 1;
    string page_token = 2;
}

message CreateReplyRequest {
    Reply reply = 1;
}

message DeleteReplyRequest {
    int64 reply_id = 1;
}

message UpdateReplyRequest{
    Reply reply = 1;
}

// user

message GetUserRequest {
    int64 user_id = 1;
}

message GetUserResponse {
    User user = 1;
}

message SignInRequest {
    string username = 1;
    string password = 2;
}

message SignInResponse {
    User user = 2;
    string sid = 3;
}

message SignOutRequest {
    int64 user_id = 1;
}

message SignUpRequest {
    User user = 1;
    string password = 3;
}

message SignUpResponse {
    User user = 2;
    string sid = 3;
}

message UpdateUserRequest {
    User user = 1;
}

message UpdatePasswordRequest {
    int64 user_id = 1;
    string password = 2;
}

//
message GetStatisticRequest {
    string date = 1;
}



// Types

message Empty {
}

message Status {
    int64 code = 1;
    string message = 2;
}

message Package {
    int64 package_id = 1;
    string name = 2;
    string description = 3;
    string create_timestamp = 4;
    int64 category_id = 5;
    string status = 6; // under_review, normal, hidden, deleted
    int64 author_id = 7;
    string author_image_url = 8;
    repeated string image_urls = 9;
    repeated string tags = 10;
    int64 download_count = 11;
}

message Binary {
    int64 binary_id = 1;
    int64 package_id = 2;
    string url = 3;
    string download_method= 4;
    int64 download_count = 5;
    Version version = 6;
    string description = 7;
    string create_timestamp = 8;
    string tag = 9;
}

message User {
    int64 user_id = 1;
    string username = 2;
    string email = 3;
    string user_type = 4;
    string image_url = 5;
    string website = 6;
}

message Version {
    int64 major = 1;
    int64 minor = 2;
    int64 patch = 3;
}

message Statistic {
    int64 visit_count = 1;
    int64 download_count = 2;
}

message Url {
    string url=1;
}

message Comment {
    // E.g. categories/xxx/pacakges/xxx, users/xxx, website, 
    string parent = 1;
    int64 comment_id = 2;
    string create_time = 3;
    string update_time = 4;
    string text = 5;
    int64 author_id = 6;
    int64 upvote_count = 7;
    repeated Reply replies = 8;
}

message Reply {
    int64 comment_id = 1;
    int64 reply_id = 2;
    string create_time = 3;
    string update_time = 4;
    string text = 5;
    int64 author_id = 6;
    int64 upvote_count = 7;
}